// Code generated by protoc-gen-go. DO NOT EDIT.
// source: conditions.proto

package conditions

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import timestamp "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Condition struct {
	Time                 *timestamp.Timestamp `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	Location             string               `protobuf:"bytes,2,opt,name=location,proto3" json:"location,omitempty"`
	Temperature          float32              `protobuf:"fixed32,3,opt,name=temperature,proto3" json:"temperature,omitempty"`
	Humidity             float32              `protobuf:"fixed32,4,opt,name=humidity,proto3" json:"humidity,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Condition) Reset()         { *m = Condition{} }
func (m *Condition) String() string { return proto.CompactTextString(m) }
func (*Condition) ProtoMessage()    {}
func (*Condition) Descriptor() ([]byte, []int) {
	return fileDescriptor_conditions_e79e695dc0e12225, []int{0}
}
func (m *Condition) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Condition.Unmarshal(m, b)
}
func (m *Condition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Condition.Marshal(b, m, deterministic)
}
func (dst *Condition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Condition.Merge(dst, src)
}
func (m *Condition) XXX_Size() int {
	return xxx_messageInfo_Condition.Size(m)
}
func (m *Condition) XXX_DiscardUnknown() {
	xxx_messageInfo_Condition.DiscardUnknown(m)
}

var xxx_messageInfo_Condition proto.InternalMessageInfo

func (m *Condition) GetTime() *timestamp.Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *Condition) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

func (m *Condition) GetTemperature() float32 {
	if m != nil {
		return m.Temperature
	}
	return 0
}

func (m *Condition) GetHumidity() float32 {
	if m != nil {
		return m.Humidity
	}
	return 0
}

type ReportSummary struct {
	TimeFrom             *timestamp.Timestamp `protobuf:"bytes,1,opt,name=time_from,json=timeFrom,proto3" json:"time_from,omitempty"`
	TimeUntil            *timestamp.Timestamp `protobuf:"bytes,2,opt,name=time_until,json=timeUntil,proto3" json:"time_until,omitempty"`
	MaxTemperature       float32              `protobuf:"fixed32,3,opt,name=max_temperature,json=maxTemperature,proto3" json:"max_temperature,omitempty"`
	MinTemperature       float32              `protobuf:"fixed32,4,opt,name=min_temperature,json=minTemperature,proto3" json:"min_temperature,omitempty"`
	AvgTemperature       float32              `protobuf:"fixed32,5,opt,name=avg_temperature,json=avgTemperature,proto3" json:"avg_temperature,omitempty"`
	MaxHumidity          float32              `protobuf:"fixed32,6,opt,name=max_humidity,json=maxHumidity,proto3" json:"max_humidity,omitempty"`
	MinHumidity          float32              `protobuf:"fixed32,7,opt,name=min_humidity,json=minHumidity,proto3" json:"min_humidity,omitempty"`
	AvgHumidity          float32              `protobuf:"fixed32,8,opt,name=avg_humidity,json=avgHumidity,proto3" json:"avg_humidity,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ReportSummary) Reset()         { *m = ReportSummary{} }
func (m *ReportSummary) String() string { return proto.CompactTextString(m) }
func (*ReportSummary) ProtoMessage()    {}
func (*ReportSummary) Descriptor() ([]byte, []int) {
	return fileDescriptor_conditions_e79e695dc0e12225, []int{1}
}
func (m *ReportSummary) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReportSummary.Unmarshal(m, b)
}
func (m *ReportSummary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReportSummary.Marshal(b, m, deterministic)
}
func (dst *ReportSummary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReportSummary.Merge(dst, src)
}
func (m *ReportSummary) XXX_Size() int {
	return xxx_messageInfo_ReportSummary.Size(m)
}
func (m *ReportSummary) XXX_DiscardUnknown() {
	xxx_messageInfo_ReportSummary.DiscardUnknown(m)
}

var xxx_messageInfo_ReportSummary proto.InternalMessageInfo

func (m *ReportSummary) GetTimeFrom() *timestamp.Timestamp {
	if m != nil {
		return m.TimeFrom
	}
	return nil
}

func (m *ReportSummary) GetTimeUntil() *timestamp.Timestamp {
	if m != nil {
		return m.TimeUntil
	}
	return nil
}

func (m *ReportSummary) GetMaxTemperature() float32 {
	if m != nil {
		return m.MaxTemperature
	}
	return 0
}

func (m *ReportSummary) GetMinTemperature() float32 {
	if m != nil {
		return m.MinTemperature
	}
	return 0
}

func (m *ReportSummary) GetAvgTemperature() float32 {
	if m != nil {
		return m.AvgTemperature
	}
	return 0
}

func (m *ReportSummary) GetMaxHumidity() float32 {
	if m != nil {
		return m.MaxHumidity
	}
	return 0
}

func (m *ReportSummary) GetMinHumidity() float32 {
	if m != nil {
		return m.MinHumidity
	}
	return 0
}

func (m *ReportSummary) GetAvgHumidity() float32 {
	if m != nil {
		return m.AvgHumidity
	}
	return 0
}

func init() {
	proto.RegisterType((*Condition)(nil), "conditions.Condition")
	proto.RegisterType((*ReportSummary)(nil), "conditions.ReportSummary")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ConditionsClient is the client API for Conditions service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ConditionsClient interface {
	Report(ctx context.Context, opts ...grpc.CallOption) (Conditions_ReportClient, error)
}

type conditionsClient struct {
	cc *grpc.ClientConn
}

func NewConditionsClient(cc *grpc.ClientConn) ConditionsClient {
	return &conditionsClient{cc}
}

func (c *conditionsClient) Report(ctx context.Context, opts ...grpc.CallOption) (Conditions_ReportClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Conditions_serviceDesc.Streams[0], "/conditions.Conditions/Report", opts...)
	if err != nil {
		return nil, err
	}
	x := &conditionsReportClient{stream}
	return x, nil
}

type Conditions_ReportClient interface {
	Send(*Condition) error
	CloseAndRecv() (*ReportSummary, error)
	grpc.ClientStream
}

type conditionsReportClient struct {
	grpc.ClientStream
}

func (x *conditionsReportClient) Send(m *Condition) error {
	return x.ClientStream.SendMsg(m)
}

func (x *conditionsReportClient) CloseAndRecv() (*ReportSummary, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ReportSummary)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ConditionsServer is the server API for Conditions service.
type ConditionsServer interface {
	Report(Conditions_ReportServer) error
}

func RegisterConditionsServer(s *grpc.Server, srv ConditionsServer) {
	s.RegisterService(&_Conditions_serviceDesc, srv)
}

func _Conditions_Report_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ConditionsServer).Report(&conditionsReportServer{stream})
}

type Conditions_ReportServer interface {
	SendAndClose(*ReportSummary) error
	Recv() (*Condition, error)
	grpc.ServerStream
}

type conditionsReportServer struct {
	grpc.ServerStream
}

func (x *conditionsReportServer) SendAndClose(m *ReportSummary) error {
	return x.ServerStream.SendMsg(m)
}

func (x *conditionsReportServer) Recv() (*Condition, error) {
	m := new(Condition)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Conditions_serviceDesc = grpc.ServiceDesc{
	ServiceName: "conditions.Conditions",
	HandlerType: (*ConditionsServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Report",
			Handler:       _Conditions_Report_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "conditions.proto",
}

func init() { proto.RegisterFile("conditions.proto", fileDescriptor_conditions_e79e695dc0e12225) }

var fileDescriptor_conditions_e79e695dc0e12225 = []byte{
	// 330 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0xd2, 0xcf, 0x4f, 0xc2, 0x30,
	0x14, 0x07, 0x70, 0x87, 0x88, 0xf0, 0xf0, 0x57, 0x9a, 0x98, 0xcc, 0x5d, 0x9c, 0x5c, 0xdc, 0xa9,
	0x24, 0x78, 0x30, 0x5e, 0xbc, 0x98, 0x18, 0x0f, 0x9e, 0x26, 0x9e, 0x49, 0x81, 0x32, 0x9b, 0xd0,
	0x76, 0x29, 0x1d, 0x81, 0x3f, 0xc4, 0xbf, 0xd1, 0x7f, 0xc3, 0xb4, 0x65, 0xa5, 0xd3, 0xc4, 0x78,
	0xec, 0xeb, 0xe7, 0x9b, 0xd7, 0xbe, 0x16, 0x2e, 0x66, 0x52, 0xcc, 0x99, 0x66, 0x52, 0xac, 0x70,
	0xa9, 0xa4, 0x96, 0x08, 0xf6, 0x95, 0xe4, 0xba, 0x90, 0xb2, 0x58, 0xd2, 0xa1, 0xdd, 0x99, 0x56,
	0x8b, 0xa1, 0x66, 0x9c, 0xae, 0x34, 0xe1, 0xa5, 0xc3, 0x83, 0xcf, 0x08, 0x7a, 0x4f, 0xb5, 0x47,
	0x18, 0xda, 0x06, 0xc4, 0x51, 0x1a, 0x65, 0xfd, 0x51, 0x82, 0x5d, 0x1a, 0xd7, 0x69, 0x3c, 0xae,
	0xd3, 0xb9, 0x75, 0x28, 0x81, 0xee, 0x52, 0xce, 0x88, 0xc9, 0xc6, 0xad, 0x34, 0xca, 0x7a, 0xb9,
	0x5f, 0xa3, 0x14, 0xfa, 0x9a, 0xf2, 0x92, 0x2a, 0xa2, 0x2b, 0x45, 0xe3, 0xc3, 0x34, 0xca, 0x5a,
	0x79, 0x58, 0x32, 0xe9, 0x8f, 0x8a, 0xb3, 0x39, 0xd3, 0xdb, 0xb8, 0x6d, 0xb7, 0xfd, 0x7a, 0xf0,
	0xd5, 0x82, 0xd3, 0x9c, 0x96, 0x52, 0xe9, 0xb7, 0x8a, 0x73, 0xa2, 0xb6, 0xe8, 0x1e, 0x7a, 0xa6,
	0xe7, 0x64, 0xa1, 0x24, 0xff, 0xc7, 0x01, 0xbb, 0x06, 0x3f, 0x2b, 0xc9, 0xd1, 0x03, 0x80, 0x0d,
	0x56, 0x42, 0xb3, 0xa5, 0x3d, 0xe6, 0xdf, 0x49, 0xdb, 0xe6, 0xdd, 0x60, 0x74, 0x0b, 0xe7, 0x9c,
	0x6c, 0x26, 0xbf, 0xef, 0x71, 0xc6, 0xc9, 0x66, 0x1c, 0x5c, 0xc5, 0x40, 0x26, 0x1a, 0xb0, 0xbd,
	0x83, 0x4c, 0xfc, 0x80, 0x64, 0x5d, 0x34, 0xe0, 0x91, 0x83, 0x64, 0x5d, 0x84, 0xf0, 0x06, 0x4e,
	0x4c, 0x6b, 0x3f, 0xa0, 0x8e, 0x9b, 0x1f, 0x27, 0x9b, 0x97, 0x5d, 0xc9, 0x12, 0x26, 0xf6, 0xe4,
	0x78, 0x47, 0x98, 0x08, 0x89, 0x69, 0xe7, 0x49, 0xd7, 0x11, 0xb2, 0x2e, 0x6a, 0x32, 0x7a, 0x05,
	0xf0, 0x1f, 0x60, 0x85, 0x1e, 0xa1, 0xe3, 0xc6, 0x8e, 0x2e, 0x71, 0xf0, 0xb3, 0xbc, 0x48, 0xae,
	0xc2, 0x72, 0xe3, 0x85, 0x06, 0x07, 0x59, 0x34, 0xed, 0xd8, 0x81, 0xde, 0x7d, 0x07, 0x00, 0x00,
	0xff, 0xff, 0x0a, 0x2a, 0x41, 0xd0, 0x97, 0x02, 0x00, 0x00,
}
